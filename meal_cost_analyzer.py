import streamlit as st
import sqlite3
import json
import pandas as pd
import requests

DB_PATH = "meals_db.sqlite"
USDA_KEY = st.secrets.get("usda_api_key", "")

# ---- –ë–ê–ó–ê –î–ê–ù–ò–• ----
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS recipes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE,
                    servings INTEGER,
                    ingredients TEXT,     -- JSON [{'name':..,'amount':..,'unit':..}]
                    instructions TEXT
                )""")
    c.execute("""CREATE TABLE IF NOT EXISTS ingredient_prices (
                    name TEXT PRIMARY KEY,
                    price REAL,
                    weight REAL,
                    unit TEXT
                )""")
    conn.commit()
    conn.close()
init_db()

def get_conn():
    return sqlite3.connect(DB_PATH)

def get_all_recipes():
    conn = get_conn()
    df = pd.read_sql("SELECT * FROM recipes", conn)
    conn.close()
    return df

def add_recipe(name, servings, ingredients, instructions):
    conn = get_conn()
    conn.execute(
        "INSERT INTO recipes (name, servings, ingredients, instructions) VALUES (?, ?, ?, ?)",
        (name, servings, json.dumps(ingredients), instructions))
    conn.commit()
    conn.close()

def update_recipe(recipe_id, name, servings, ingredients, instructions):
    conn = get_conn()
    conn.execute(
        "UPDATE recipes SET name=?, servings=?, ingredients=?, instructions=? WHERE id=?",
        (name, servings, json.dumps(ingredients), instructions, recipe_id))
    conn.commit()
    conn.close()

def delete_recipe(recipe_id):
    conn = get_conn()
    conn.execute("DELETE FROM recipes WHERE id=?", (recipe_id,))
    conn.commit()
    conn.close()

def get_prices():
    conn = get_conn()
    df = pd.read_sql("SELECT * FROM ingredient_prices", conn)
    conn.close()
    return df

def save_price(name, price, weight, unit):
    conn = get_conn()
    conn.execute(
        "INSERT OR REPLACE INTO ingredient_prices (name, price, weight, unit) VALUES (?, ?, ?, ?)",
        (name, price, weight, unit)
    )
    conn.commit()
    conn.close()

def delete_ingredient(name):
    conn = get_conn()
    conn.execute("DELETE FROM ingredient_prices WHERE name=?", (name,))
    conn.commit()
    conn.close()

@st.cache_data(show_spinner=False)
def get_nutrition(query):
    if not USDA_KEY:
        return {}
    url = "https://api.nal.usda.gov/fdc/v1/foods/search"
    params = {"api_key": USDA_KEY, "query": query, "pageSize": 1}
    try:
        r = requests.get(url, params=params)
        food = r.json()["foods"][0]
        n = {n["nutrientName"]: n["value"] for n in food.get("foodNutrients", [])}
        return {
            "calories": n.get("Energy", 0),
            "protein": n.get("Protein", 0),
            "fat": n.get("Total lipid (fat)", 0),
            "carbs": n.get("Carbohydrate, by difference", 0)
        }
    except Exception:
        return {}

st.title("üç≤ Meal Cost & Nutrition Analyzer (SQLite, full CRUD)")

mode = st.sidebar.radio("–†–µ–∂–∏–º", [
    "–í–∏–±—ñ—Ä —Ä–µ—Ü–µ–ø—Ç—É", "–î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç", "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ—Ü–µ–ø—Ç",
    "–¶—ñ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤", "–î–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç",
    "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–∞–∑—É"
])

# --- –í–ò–ë–Ü–†/–ê–ù–ê–õ–Ü–ó –†–ï–¶–ï–ü–¢–£ ---
if mode == "–í–∏–±—ñ—Ä —Ä–µ—Ü–µ–ø—Ç—É":
    df_recipes = get_all_recipes()
    if df_recipes.empty:
        st.info("–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç.")
    else:
        search = st.text_input("–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—É:")
        if search:
            filtered = df_recipes[df_recipes["name"].str.contains(search, case=False, na=False)]
        else:
            filtered = df_recipes
        recipe_name = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Ü–µ–ø—Ç:", filtered["name"].tolist())
        if recipe_name:
            row = df_recipes[df_recipes["name"] == recipe_name].iloc[0]
            servings = int(row["servings"])
            ingr_list = json.loads(row["ingredients"])
            st.markdown(f"**{row['name']}** ‚Äî {servings} servings")
            st.markdown(row["instructions"])
            st.subheader("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —Ç–∞ —Ü—ñ–Ω–∏")
            df_prices = get_prices()
            price_dict = {row["name"]: row for idx, row in df_prices.iterrows()}

            # --- –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –¶–Ü–ù –£ –¢–ê–ë–õ–ò–¶–Ü ---
            st.write("### –í—Å—ñ —Ü—ñ–Ω–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ (–º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏):")
            df_edit = df_prices.copy()
            edited = st.data_editor(
                df_edit, key="edit_prices",
                column_config={
                    "price": st.column_config.NumberColumn("–¶—ñ–Ω–∞ (CAD)", min_value=0),
                    "weight": st.column_config.NumberColumn("–í–∞–≥–∞ (–≥/–º–ª/—à—Ç)", min_value=1),
                    "unit": st.column_config.TextColumn("–û–¥–∏–Ω–∏—Ü—è (–≥/–º–ª/—à—Ç/–ª/pcs/...)")
                },
                num_rows="dynamic"
            )
            if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω"):
                for _, row in edited.iterrows():
                    if row["name"]:
                        save_price(row["name"], row["price"], row["weight"], row["unit"])
                st.success("–û–Ω–æ–≤–ª–µ–Ω–æ –≤—Å—ñ —Ü—ñ–Ω–∏/–æ–¥–∏–Ω–∏—Ü—ñ!")

            # --- –ê–Ω–∞–ª—ñ–∑ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –ø–æ —Ä–µ—Ü–µ–ø—Ç—É ---
            total_cost = 0.0
            ingr_cals, ingr_prot, ingr_fat, ingr_carb = [], [], [], []
            for ingr in ingr_list:
                name = ingr["name"]
                amt = float(ingr.get("amount", 0))
                unit = ingr.get("unit", "g")
                p = price_dict.get(name, {"price":0, "weight":100, "unit":unit})
                ingr_price, ingr_weight, price_unit = float(p["price"]), float(p["weight"]), p.get("unit", unit)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è, —è–∫—â–æ –æ–¥–∏–Ω–∏—Ü—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å (–ø—Ä–æ—Å—Ç–∏–π –≤–∏–ø–∞–¥–æ–∫)
                if price_unit != unit:
                    st.warning(f"–û–¥–∏–Ω–∏—Ü—è {name}: —Ä–µ—Ü–µ–ø—Ç {unit}, —Ü—ñ–Ω–∞ {price_unit}. –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤—Ä—É—á–Ω—É.")
                # –í–∞—Ä—Ç—ñ—Å—Ç—å
                if unit in ["g", "ml"]:
                    price_per_g = ingr_price / ingr_weight if ingr_weight else 0
                    cost = price_per_g * amt
                else:
                    cost = ingr_price * amt / ingr_weight if ingr_weight else 0
                total_cost += cost
                # –ü–æ–∂–∏–≤–Ω—ñ—Å—Ç—å
                nutr = get_nutrition(name)
                ingr_cals.append(nutr.get("calories", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("calories", 0) * amt)
                ingr_prot.append(nutr.get("protein", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("protein", 0) * amt)
                ingr_fat.append(nutr.get("fat", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("fat", 0) * amt)
                ingr_carb.append(nutr.get("carbs", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("carbs", 0) * amt)
            st.header("üìä –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä–∞–≤–∏ (–Ω–∞ 1 –æ—Å–æ–±—É)")
            st.write(f"**–í–∞—Ä—Ç—ñ—Å—Ç—å:** CAD {total_cost/servings:.2f}")
            st.write(f"**–ö–∞–ª–æ—Ä—ñ—ó:** {sum(ingr_cals)/servings:.0f} kcal")
            st.write(f"**–ë—ñ–ª–∫–∏:** {sum(ingr_prot)/servings:.1f} –≥")
            st.write(f"**–ñ–∏—Ä–∏:** {sum(ingr_fat)/servings:.1f} –≥")
            st.write(f"**–í—É–≥–ª–µ–≤–æ–¥–∏:** {sum(ingr_carb)/servings:.1f} –≥")

# --- –î–û–î–ê–¢–ò –†–ï–¶–ï–ü–¢ ---
if mode == "–î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç":
    st.subheader("–ù–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç")
    name = st.text_input("–ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏")
    servings = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π", value=1, min_value=1)
    ingr_block = st.text_area("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç: name,amount,unit; –ø–æ —Ä—è–¥–∫—É)")
    instructions = st.text_area("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è")
    if st.button("–î–æ–¥–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç"):
        ingr_list = []
        for line in ingr_block.strip().split("\n"):
            parts = [x.strip() for x in line.split(",")]
            if len(parts) == 3:
                ingr_list.append({"name": parts[0], "amount": float(parts[1]), "unit": parts[2]})
        if name and ingr_list:
            add_recipe(name, servings, ingr_list, instructions)
            st.success(f"–î–æ–¥–∞–Ω–æ —Ä–µ—Ü–µ–ø—Ç {name}!")
        else:
            st.error("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç.")

# --- –†–ï–î–ê–ì–£–í–ê–¢–ò/–í–ò–î–ê–õ–ò–¢–ò –†–ï–¶–ï–ü–¢ ---
if mode == "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ—Ü–µ–ø—Ç":
    df = get_all_recipes()
    if not df.empty:
        row = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è:", df["name"].tolist())
        recipe_row = df[df["name"] == row].iloc[0]
        rid = recipe_row["id"]
        name = st.text_input("–ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏", value=recipe_row["name"])
        servings = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ä—Ü—ñ–π", value=int(recipe_row["servings"]), min_value=1)
        ingr_block = st.text_area(
            "–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç: name,amount,unit; –ø–æ —Ä—è–¥–∫—É)",
            value="\n".join(f"{i['name']},{i['amount']},{i['unit']}" for i in json.loads(recipe_row["ingredients"]))
        )
        instructions = st.text_area("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó", value=recipe_row["instructions"])
        if st.button("–û–Ω–æ–≤–∏—Ç–∏ —Ä–µ—Ü–µ–ø—Ç"):
            ingr_list = []
            for line in ingr_block.strip().split("\n"):
                parts = [x.strip() for x in line.split(",")]
                if len(parts) == 3:
                    ingr_list.append({"name": parts[0], "amount": float(parts[1]), "unit": parts[2]})
            update_recipe(rid, name, servings, ingr_list, instructions)
            st.success("–û–Ω–æ–≤–ª–µ–Ω–æ!")
        if st.button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ä–µ—Ü–µ–ø—Ç"):
            delete_recipe(rid)
            st.success("–í–∏–¥–∞–ª–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç.")

# --- –†–ï–î–ê–ì–£–í–ê–¢–ò –í–°–Ü –ü–†–û–î–£–ö–¢–ò ---
if mode == "–¶—ñ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤":
    df = get_prices()
    if not df.empty:
        st.write("### –í—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ (–Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è):")
        df_edit = df.copy()
        edited = st.data_editor(
            df_edit, key="edit_all_ings",
            column_config={
                "price": st.column_config.NumberColumn("–¶—ñ–Ω–∞ (CAD)", min_value=0),
                "weight": st.column_config.NumberColumn("–í–∞–≥–∞ (–≥/–º–ª/—à—Ç)", min_value=1),
                "unit": st.column_config.TextColumn("–û–¥–∏–Ω–∏—Ü—è (–≥/–º–ª/—à—Ç/–ª/pcs/...)")
            },
            num_rows="dynamic"
        )
        if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ (–≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏)"):
            for _, row in edited.iterrows():
                if row["name"]:
                    save_price(row["name"], row["price"], row["weight"], row["unit"])
            st.success("–û–Ω–æ–≤–ª–µ–Ω–æ –≤—Å—ñ —Ü—ñ–Ω–∏/–æ–¥–∏–Ω–∏—Ü—ñ!")
    else:
        st.info("–©–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É.")

# --- –î–û–î–ê–¢–ò/–í–ò–î–ê–õ–ò–¢–ò –ü–†–û–î–£–ö–¢ ---
if mode == "–î–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç":
    st.subheader("–î–æ–¥–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç")
    name = st.text_input("–ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É")
    price = st.number_input("–¶—ñ–Ω–∞ (CAD)", min_value=0.0)
    weight = st.number_input("–í–∞–≥–∞ –ø–∞—á–∫–∏ (–≥/–º–ª/—à—Ç)", min_value=1.0)
    unit = st.selectbox("–û–¥–∏–Ω–∏—Ü—è", ["g", "ml", "pcs", "tbsp", "slice", "l", "—à—Ç"])
    if st.button("–î–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç"):
        if name:
            save_price(name, price, weight, unit)
            st.success(f"–î–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: {name}")
    if st.button("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç"):
        if name:
            delete_ingredient(name)
            st.success(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: {name}")

# --- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ë–î ---
if mode == "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–∞–∑—É":
    with open(DB_PATH, "rb") as f:
        st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—é –±–∞–∑—É –¥–∞–Ω–∏—Ö (SQLite)", data=f, file_name="meals_db.sqlite")
    st.info("–¶–µ–π —Ñ–∞–π–ª –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —ñ–Ω—à–∏–π –ü–ö —ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö!")

