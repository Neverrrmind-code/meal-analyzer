import streamlit as st
import pandas as pd
import requests
import json
import io

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
USDA_KEY = st.secrets.get("usda_api_key")
PCLOUD_RECIPES_URL = st.secrets.get("pcloud_recipes_url")   # CSV recipes
PCLOUD_PRICES_URL = st.secrets.get("pcloud_prices_url")     # JSON prices
PCLOUD_PRICES_WRITE = st.secrets.get("pcloud_prices_write_url")  # –Ø–∫—â–æ —î POST url –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑ pCloud (CSV)
@st.cache_data
def load_recipes():
    # –ü—Ä—è–º–µ —á–∏—Ç–∞–Ω–Ω—è CSV —á–µ—Ä–µ–∑ requests+io –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ!
    r = requests.get(PCLOUD_RECIPES_URL)
    r.raise_for_status()
    return pd.read_csv(io.StringIO(r.content.decode()))

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω –∑ pCloud (JSON)
@st.cache_data
def load_prices():
    try:
        r = requests.get(PCLOUD_PRICES_URL)
        r.raise_for_status()
        return r.json()
    except Exception:
        return {}

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ü—ñ–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ POST –∞–±–æ —Ä—É—á–Ω–∏–π JSON)
def save_prices(prices):
    if PCLOUD_PRICES_WRITE:
        resp = requests.post(PCLOUD_PRICES_WRITE, json=prices)
        if resp.status_code == 200:
            st.success("–¶—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —É pCloud!")
        else:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É ({resp.status_code})")
    else:
        st.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–∫–æ–ø—ñ—é–π —Ü–µ–π JSON –≤—Ä—É—á–Ω—É —É —Å–≤—ñ–π pCloud:")
        st.code(json.dumps(prices, indent=2))

# --- –ü–æ–∂–∏–≤–Ω—ñ—Å—Ç—å –∑ USDA
@st.cache_data(show_spinner=False)
def get_nutrition(query):
    if not USDA_KEY:
        return {}
    url = "https://api.nal.usda.gov/fdc/v1/foods/search"
    params = {"api_key": USDA_KEY, "query": query, "pageSize": 1}
    try:
        r = requests.get(url, params=params)
        food = r.json()["foods"][0]
        n = {n["nutrientName"]: n["value"] for n in food.get("foodNutrients", [])}
        return {
            "calories": n.get("Energy", 0),
            "protein": n.get("Protein", 0),
            "fat": n.get("Total lipid (fat)", 0),
            "carbs": n.get("Carbohydrate, by difference", 0)
        }
    except Exception:
        return {}

# --- 1. –ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—É
st.title("üç≤ Simple Meal Cost & Nutrition Analyzer")
recipes = load_recipes()
prices = load_prices()

search_term = st.text_input("–ü–æ—à—É–∫ —Ä–µ—Ü–µ–ø—Ç—É (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é):")
if search_term:
    search_results = recipes[recipes["name"].str.contains(search_term, case=False, na=False)]
else:
    search_results = recipes.head(10)

# --- 2. –í–∏–±—ñ—Ä —Ä–µ—Ü–µ–ø—Ç—É
recipe_name = st.selectbox("–í–∏–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç:", search_results["name"].tolist())
recipe = search_results[search_results["name"] == recipe_name].iloc[0] if recipe_name else None

if recipe is not None:
    ingr_list = json.loads(recipe["ingredients"])
    servings = int(recipe.get("servings", 1))
    st.markdown(f"**{recipe['name']}** ‚Äî {servings} servings")
    st.markdown(recipe["instructions"])

    # --- 3. –¢–∞–±–ª–∏—Ü—è —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ —ñ —Ü—ñ–Ω–∏
    st.header("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —Ç–∞ —Ü—ñ–Ω–∏")
    updated = False
    new_prices = prices.copy()
    table = []
    total_cost = 0.0
    ingr_cals, ingr_prot, ingr_fat, ingr_carb = [], [], [], []

    for ingr in ingr_list:
        name = ingr["name"]
        amt = float(ingr.get("amount", 0))
        unit = ingr.get("unit", "g")

        ingr_price = float(prices.get(name, {}).get("price", 0))
        ingr_weight = float(prices.get(name, {}).get("weight", 100))
        # –í–≤—ñ–¥ —Ü—ñ–Ω–∏, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—è –∞–±–æ –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏
        cols = st.columns([4, 2, 2, 2, 2, 2])
        cols[0].write(name)
        cols[1].write(amt)
        cols[2].write(unit)
        price_val = cols[3].number_input(f"{name}_price", value=ingr_price, min_value=0.0, key=f"p_{name}")
        weight_val = cols[4].number_input(f"{name}_weight", value=ingr_weight, min_value=1.0, key=f"w_{name}")

        if price_val != ingr_price or weight_val != ingr_weight:
            new_prices[name] = {"price": price_val, "weight": weight_val}
            updated = True

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞
        if unit in ["g", "ml"]:
            price_per_g = price_val / weight_val if weight_val else 0
            cost = price_per_g * amt
        else:  # "pcs", "tbsp", ...
            cost = price_val * amt / weight_val if weight_val else 0
        total_cost += cost

        # –ü–æ–∂–∏–≤–Ω—ñ—Å—Ç—å
        nutr = get_nutrition(name)
        ingr_cals.append(nutr.get("calories", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("calories", 0) * amt)
        ingr_prot.append(nutr.get("protein", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("protein", 0) * amt)
        ingr_fat.append(nutr.get("fat", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("fat", 0) * amt)
        ingr_carb.append(nutr.get("carbs", 0) * amt / 100 if unit in ["g", "ml"] else nutr.get("carbs", 0) * amt)

        cols[5].write(f"{cost:.2f}")
        table.append([name, amt, unit, price_val, weight_val, cost])

    # --- –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤—ñ —Ü—ñ–Ω–∏ —É —Ö–º–∞—Ä—É, —è–∫—â–æ —Ç—Ä–µ–±–∞
    if updated and st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ü—ñ–Ω–∏ —É pCloud"):
        save_prices(new_prices)
        st.success("–ó–±–µ—Ä–µ–∂–µ–Ω–æ!")

    # --- 4. –ê–Ω–∞–ª—ñ–∑
    st.header("üìä –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä–∞–≤–∏ (–Ω–∞ 1 –æ—Å–æ–±—É)")
    st.write(f"**–í–∞—Ä—Ç—ñ—Å—Ç—å:** CAD {total_cost/servings:.2f}")
    st.write(f"**–ö–∞–ª–æ—Ä—ñ—ó:** {sum(ingr_cals)/servings:.0f} kcal")
    st.write(f"**–ë—ñ–ª–∫–∏:** {sum(ingr_prot)/servings:.1f} –≥")
    st.write(f"**–ñ–∏—Ä–∏:** {sum(ingr_fat)/servings:.1f} –≥")
    st.write(f"**–í—É–≥–ª–µ–≤–æ–¥–∏:** {sum(ingr_carb)/servings:.1f} –≥")
