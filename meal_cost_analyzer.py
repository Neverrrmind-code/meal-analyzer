import streamlit as st
import json
import os
from datetime import datetime
from spoonacular_api import get_recipe

SPOONACULAR_KEY = st.secrets["spoonacular_key"]
INGREDIENTS_FILE = "ingredients_db.json"
RECIPES_FILE = "recipes_db.json"

def init_db():
    if not os.path.exists(INGREDIENTS_FILE):
        with open(INGREDIENTS_FILE, "w") as f:
            json.dump({}, f)
    if not os.path.exists(RECIPES_FILE):
        with open(RECIPES_FILE, "w") as f:
            json.dump({}, f)

def load_json(file):
    with open(file, "r") as f:
        return json.load(f)

def save_json(file, data):
    with open(file, "w") as f:
        json.dump(data, f, indent=2)

init_db()
ingredients = load_json(INGREDIENTS_FILE)
recipes = load_json(RECIPES_FILE)

st.title("üç≤ Meal Cost & Nutrition Analyzer (Spoonacular)")
st.write("–®—É–∫–∞–π —Ä–µ—Ü–µ–ø—Ç–∏ –æ–Ω–ª–∞–π–Ω, –ø—ñ–¥—Ç—è–≥—É–π —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –π –æ—Ü—ñ–Ω—é–π —ó—Ö–Ω—é —Ü—ñ–Ω—É —Ç–∞ –ø–æ–∂–∏–≤–Ω—ñ—Å—Ç—å!")

# --- 1. –Ü–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç—É –∑—ñ Spoonacular
st.header("1. üì• –Ü–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç—É –∑ –ø—É–±–ª—ñ—á–Ω–æ—ó –±–∞–∑–∏")
query = st.text_input("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ –¥–ª—è –ø–æ—à—É–∫—É (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é):")
if st.button("–ó–Ω–∞–π—Ç–∏ —Ç–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç") and query:
    rec = get_recipe(SPOONACULAR_KEY, query)
    if rec:
        # –î–æ–¥–∞—î–º–æ —Ä–µ—Ü–µ–ø—Ç –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î
        recipes[rec["title"]] = {
            "ingredients": {k: v["qty"] for k,v in rec["ingredients"].items()},
            "units": {k: v["unit"] for k,v in rec["ingredients"].items()},
            "servings": rec["servings"]
        }
        save_json(RECIPES_FILE, recipes)
        st.success(f"–†–µ—Ü–µ–ø—Ç '{rec['title']}' –¥–æ–¥–∞–Ω–æ!")
    else:
        st.warning("–†–µ—Ü–µ–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# --- 2. –í–∏–±—ñ—Ä —Ä–µ—Ü–µ–ø—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
st.header("2. üçõ –ê–Ω–∞–ª—ñ–∑ —Ä–µ—Ü–µ–ø—Ç—É")
selected_recipe = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Ü–µ–ø—Ç", list(recipes.keys()))
if selected_recipe:
    rec = recipes[selected_recipe]
    servings = rec["servings"]
    ingr_table = []
    total_cost = total_cals = total_prot = total_fat = total_carb = 0.0

        if "instructions" in rec and rec["instructions"]:
        st.subheader("üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è")
        st.write(rec["instructions"])

    for ingr, qty in rec["ingredients"].items():
        # unit
        unit = rec.get("units", {}).get(ingr, "g")
        # Check if in local ingredient DB
        if ingr not in ingredients:
            price = st.number_input(f"–¶—ñ–Ω–∞ {ingr} ({unit}, –∑–∞ –ø–∞–∫—É–≤–∞–Ω–Ω—è):", min_value=0.0, key=f"price_{ingr}")
            weight = st.number_input(f"–í–∞–≥–∞ –ø–∞–∫—É–≤–∞–Ω–Ω—è {ingr} ({unit}):", min_value=1.0, key=f"weight_{ingr}")
            # –î–æ–¥–∞—î–º–æ –ø—É—Å—Ç—ñ –Ω—É—Ç—Ä—ñ—î–Ω—Ç–∏ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ/—Ä—É—á–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
            ingredients[ingr] = {
                "price": price, "weight": weight,
                "unit": unit, "weight_per_unit": 1,
                "calories": 0, "protein": 0, "fat": 0, "carbs": 0,
                "updated": str(datetime.now())
            }
            save_json(INGREDIENTS_FILE, ingredients)
        else:
            price = ingredients[ingr]["price"]
            weight = ingredients[ingr]["weight"]

        price_per_g = price / weight if weight else 0
        cost = price_per_g * qty
        total_cost += cost
        ingr_table.append(f"{ingr}: {qty} {unit}, –≤–∞—Ä—Ç—ñ—Å—Ç—å: CAD {cost:.2f}")

    st.subheader("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å (–±–µ–∑ –Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤):")
    st.write("\n".join(ingr_table))
    st.write(f"–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó –ø–æ—Ä—Ü—ñ—ó: **CAD {total_cost/servings:.2f}**")

# --- 3. –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤, –Ω—É—Ç—Ä—ñ—î–Ω—Ç–∏
with st.expander("‚öôÔ∏è –î–æ–¥–∞—Ç–∏/–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —Ç–∞ –Ω—É—Ç—Ä—ñ—î–Ω—Ç–∏"):
    name = st.text_input("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç")
    if name:
        price = st.number_input("Price (CAD)", min_value=0.0)
        weight = st.number_input("Weight (in unit)", min_value=1.0)
        unit = st.selectbox("Unit", ["g", "ml", "pcs", "tbsp", "slice"])
        weight_per_unit = st.number_input("Grams per unit", min_value=1.0, value=1.0)
        calories = st.number_input("Calories per 100g", value=0.0)
        protein = st.number_input("Protein per 100g", value=0.0)
        fat = st.number_input("Fat per 100g", value=0.0)
        carbs = st.number_input("Carbs per 100g", value=0.0)
        if st.button("Save Ingredient (edit)"):
            ingredients[name] = {
                "price": price,
                "weight": weight,
                "unit": unit,
                "weight_per_unit": weight_per_unit,
                "calories": calories,
                "protein": protein,
                "fat": fat,
                "carbs": carbs,
                "updated": str(datetime.now())
            }
            save_json(INGREDIENTS_FILE, ingredients)
            st.success(f"Saved: {name}")

