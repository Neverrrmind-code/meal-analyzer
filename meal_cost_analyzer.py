import streamlit as st
import json
import os
import requests
from datetime import datetime

# ========== SPOONACULAR & USDA API ==========
def search_recipes(api_key, query, number=5):
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ dict [{id, title}]"""
    url = "https://api.spoonacular.com/recipes/complexSearch"
    params = {
        "apiKey": api_key,
        "query": query,
        "number": number
    }
    res = requests.get(url, params=params)
    res.raise_for_status()
    data = res.json()
    return data.get("results", [])

def get_recipe_info(api_key, recipe_id):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ—Ü–µ–ø—Ç (—ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏, —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó...)"""
    url = f"https://api.spoonacular.com/recipes/{recipe_id}/information"
    params = {"apiKey": api_key}
    res = requests.get(url, params=params)
    res.raise_for_status()
    recipe = res.json()
    ingredients = {}
    for ingr in recipe["extendedIngredients"]:
        name = ingr.get("nameClean") or ingr["name"]
        amount = ingr["measures"]["metric"]["amount"]
        unit = ingr["measures"]["metric"]["unitShort"] or "g"
        ingredients[name.title()] = {"qty": amount, "unit": unit}
    # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —è–∫ –∫—Ä–æ–∫–∏
    steps = []
    for analyzed in recipe.get("analyzedInstructions", []):
        for step in analyzed.get("steps", []):
            steps.append(step["step"])
    full_instructions = "\n".join(steps) if steps else (recipe.get("instructions") or "")
    return {
        "title": recipe["title"],
        "ingredients": ingredients,
        "servings": recipe["servings"],
        "instructions": full_instructions
    }

def search_usda_nutrition(api_key, ingredient_name):
    url = f"https://api.nal.usda.gov/fdc/v1/foods/search"
    params = {
        "api_key": api_key,
        "query": ingredient_name,
        "pageSize": 1
    }
    try:
        res = requests.get(url, params=params)
        res.raise_for_status()
        data = res.json()
        if not data.get("foods"): return None
        nutrients = {n["nutrientName"]: n["value"] for n in data["foods"][0].get("foodNutrients", [])}
        return {
            "calories": nutrients.get("Energy", 0),
            "protein": nutrients.get("Protein", 0),
            "fat": nutrients.get("Total lipid (fat)", 0),
            "carbs": nutrients.get("Carbohydrate, by difference", 0)
        }
    except Exception as e:
        return None

# ========== CONFIG & DB ==========
SPOONACULAR_KEY = st.secrets.get("spoonacular_key")
USDA_KEY = st.secrets.get("usda_api_key")
if not SPOONACULAR_KEY:
    st.error("Spoonacular API key not found! Set 'spoonacular_key' in .streamlit/secrets.toml or Streamlit Cloud Secrets.")
    st.stop()
if not USDA_KEY:
    st.warning("USDA API key –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")

INGREDIENTS_FILE = "ingredients_db.json"
RECIPES_FILE = "recipes_db.json"

def init_db():
    if not os.path.exists(INGREDIENTS_FILE):
        with open(INGREDIENTS_FILE, "w") as f:
            json.dump({}, f)
    if not os.path.exists(RECIPES_FILE):
        with open(RECIPES_FILE, "w") as f:
            json.dump({}, f)

def load_json(file):
    with open(file, "r") as f:
        return json.load(f)

def save_json(file, data):
    with open(file, "w") as f:
        json.dump(data, f, indent=2)

init_db()
ingredients = load_json(INGREDIENTS_FILE)
recipes = load_json(RECIPES_FILE)

st.title("üç≤ Meal Cost & Nutrition Analyzer (Spoonacular+USDA)")
st.write("–®—É–∫–∞–π —Ä–µ—Ü–µ–ø—Ç–∏ –æ–Ω–ª–∞–π–Ω, –ø—ñ–¥—Ç—è–≥—É–π —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ –π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é, –æ—Ü—ñ–Ω—é–π —Ü—ñ–Ω—É —Ç–∞ –ø–æ–∂–∏–≤–Ω—ñ—Å—Ç—å!")

# --- 1. –ü–æ—à—É–∫ —ñ —ñ–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç—É –∑—ñ Spoonacular
st.header("1. üì• –ü–æ—à—É–∫ —Ç–∞ —ñ–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç—É –∑ –ø—É–±–ª—ñ—á–Ω–æ—ó –±–∞–∑–∏")
query = st.text_input("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ –¥–ª—è –ø–æ—à—É–∫—É (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é):")
search_results = []
if st.button("üîç –ó–Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏") and query:
    try:
        search_results = search_recipes(SPOONACULAR_KEY, query)
        if not search_results:
            st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞.")
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É: {e}")

# –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ —Ä–µ—Ü–µ–ø—Ç—ñ–≤ ‚Äî –¥–∞—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω:
if search_results:
    st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:")
    options = {f"{r['title']} (ID:{r['id']})": r["id"] for r in search_results}
    selected = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É:", list(options.keys()))
    if st.button("üì• –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç"):
        recipe_id = options[selected]
        rec = get_recipe_info(SPOONACULAR_KEY, recipe_id)
        if rec:
            recipes[rec["title"]] = {
                "ingredients": {k: v["qty"] for k,v in rec["ingredients"].items()},
                "units": {k: v["unit"] for k,v in rec["ingredients"].items()},
                "servings": rec["servings"],
                "instructions": rec["instructions"]
            }
            save_json(RECIPES_FILE, recipes)
            st.success(f"–†–µ—Ü–µ–ø—Ç '{rec['title']}' –¥–æ–¥–∞–Ω–æ!")
            st.experimental_rerun()
        else:
            st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç.")

# --- 2. –ê–Ω–∞–ª—ñ–∑ —ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ
st.header("2. üçõ –ê–Ω–∞–ª—ñ–∑ —Ä–µ—Ü–µ–ø—Ç—É")
selected_recipe = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Ü–µ–ø—Ç", list(recipes.keys()))
if selected_recipe:
    rec = recipes[selected_recipe]
    servings = rec["servings"]

    st.subheader("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —Ç–∞ —Ü—ñ–Ω–∞ (—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É —Ç–∞–±–ª–∏—Ü—ñ):")
    ingr_names = list(rec["ingredients"].keys())
    table = []

    with st.form("edit_ingredients_table"):
        cols = st.columns([3, 2, 2, 2, 2, 2, 2, 2])
        # Header
        cols[0].markdown("**–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç**")
        cols[1].markdown("**–ö—ñ–ª—å–∫—ñ—Å—Ç—å**")
        cols[2].markdown("**–û–¥–∏–Ω–∏—Ü—è**")
        cols[3].markdown("**–¶—ñ–Ω–∞ –∑–∞ —É–ø–∞–∫–æ–≤–∫—É (CAD)**")
        cols[4].markdown("**–í–∞–≥–∞ —É–ø–∞–∫–æ–≤–∫–∏**")
        cols[5].markdown("**Calories/100g**")
        cols[6].markdown("**Protein**")
        cols[7].markdown("**Carbs**")

        cost_total = 0.0
        new_ingredients = ingredients.copy()
        for ingr in ingr_names:
            qty = rec["ingredients"][ingr]
            unit = rec.get("units", {}).get(ingr, "g")
            ingr_data = new_ingredients.get(ingr, {})
            price = ingr_data.get("price", 0.0)
            weight = ingr_data.get("weight", 0.0)
            calories = ingr_data.get("calories", 0.0)
            protein = ingr_data.get("protein", 0.0)
            fat = ingr_data.get("fat", 0.0)
            carbs = ingr_data.get("carbs", 0.0)
            # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            cols = st.columns([3, 2, 2, 2, 2, 2, 2, 2])
            cols[0].write(ingr)
            cols[1].write(f"{qty}")
            cols[2].write(unit)
            price_val = cols[3].number_input(f"price_{ingr}", value=float(price), min_value=0.0, step=0.1, key=f"price_{ingr}")
            weight_val = cols[4].number_input(f"weight_{ingr}", value=float(weight), min_value=1.0, step=1.0, key=f"weight_{ingr}")

            # --- –ê–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ USDA (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø—É—Å—Ç–æ)
            if USDA_KEY and (not calories and not protein and not fat and not carbs):
                usda = search_usda_nutrition(USDA_KEY, ingr)
                if usda:
                    calories = usda["calories"]
                    protein = usda["protein"]
                    fat = usda["fat"]
                    carbs = usda["carbs"]
            calories_val = cols[5].number_input(f"cal_{ingr}", value=float(calories), step=1.0, key=f"cal_{ingr}")
            protein_val = cols[6].number_input(f"prot_{ingr}", value=float(protein), step=0.1, key=f"prot_{ingr}")
            carbs_val   = cols[7].number_input(f"carb_{ingr}", value=float(carbs), step=0.1, key=f"carb_{ingr}")

            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ø—ñ—é
            new_ingredients[ingr] = {
                **ingr_data, "price": price_val, "weight": weight_val, "unit": unit,
                "calories": calories_val, "protein": protein_val, "carbs": carbs_val,
                "fat": fat
            }
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
            price_per_g = price_val / weight_val if weight_val else 0
            cost = price_per_g * qty
            cost_total += cost
            table.append([ingr, qty, unit, price_val, weight_val, calories_val, protein_val, carbs_val, cost])

        save_btn = st.form_submit_button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—ñ –∑–º—ñ–Ω–∏")
        if save_btn:
            ingredients.update(new_ingredients)
            save_json(INGREDIENTS_FILE, ingredients)
            st.success("–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑–º—ñ–Ω–∏ –¥–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤!")
            st.experimental_rerun()

    st.write("### –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è")
    st.dataframe(
        { "–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç": [row[0] for row in table],
          "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": [row[1] for row in table],
          "–û–¥–∏–Ω–∏—Ü—è": [row[2] for row in table],
          "–¶—ñ–Ω–∞, CAD": [row[3] for row in table],
          "–í–∞–≥–∞ —É–ø–∞–∫–æ–≤–∫–∏": [row[4] for row in table],
          "Calories/100g": [row[5] for row in table],
          "Protein": [row[6] for row in table],
          "Carbs": [row[7] for row in table],
          "–í–∞—Ä—Ç—ñ—Å—Ç—å, CAD": [row[8] for row in table]
        },
        hide_index=True
    )
    st.write(f"**–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó –ø–æ—Ä—Ü—ñ—ó:** CAD {cost_total/servings:.2f}")

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
    if "instructions" in rec and rec["instructions"]:
        st.subheader("üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è")
        st.write(rec["instructions"])

# --- 3. –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ (–ø–æ–≤–Ω–∏–π —Ä–µ–∂–∏–º)
with st.expander("‚öôÔ∏è –î–æ–¥–∞—Ç–∏/–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ —Ç–∞ –Ω—É—Ç—Ä—ñ—î–Ω—Ç–∏ (advanced)"):
    name = st.text_input("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç")
    if name:
        price = st.number_input("Price (CAD)", min_value=0.0)
        weight = st.number_input("Weight (in unit)", min_value=1.0)
        unit = st.selectbox("Unit", ["g"]()
